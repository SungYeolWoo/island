/// <reference path="../typings/tsd.d.ts" />
var _ = require('lodash');
var Promise = require('bluebird');
var ListenableAdapter = require('./adapters/listenable-adapter');
/**
 * Create a new Islet.
 * @abstract
 * @class
 */
var Islet = (function () {
    function Islet() {
        /** @type {Object.<string, IAbstractAdapter>} [adapters={}] */
        this.adapters = {};
    }
    /**
     * Register the islet which is the suite of micro-service
     * @param {Islet} islet
     * @static
     */
    Islet.registerIslet = function (islet) {
        if (Islet.islet)
            throw new Error('The islet already has been registered.');
        Islet.islet = islet;
    };
    Islet.getIslet = function () {
        return Islet.islet;
    };
    Islet.run = function () {
        if (this.islet)
            return;
        var Class;
        var config;
        var args = Array.prototype.slice.call(arguments);
        if (args.length === 1) {
            Class = args[0];
            config = Promise.resolve();
        }
        else if (args.length > 1) {
            Class = args[1];
            config = args[0];
        }
        // Create such a micro-service instance.
        var islet = new Class();
        this.registerIslet(islet);
        return config.then(function (configure) {
            islet.main(configure);
            return islet.initialize().then(function () {
                return islet.start();
            });
        });
    };
    /**
     * Register the adapter.
     * @param {string} name
     * @param {IAbstractAdapter} adapter
     */
    Islet.prototype.registerAdapter = function (name, adapter) {
        if (this.adapters[name])
            throw new Error('duplicated adapter');
        this.adapters[name] = adapter;
    };
    Islet.prototype.getAdaptee = function (name) {
        if (!this.adapters[name])
            throw new Error('Missing adapter');
        return this.adapters[name].adaptee;
    };
    /**
     * @abstract
     * @param {any} config
     */
    Islet.prototype.main = function (config) {
        throw new Error('Not implemented exception.');
    };
    /**
     * @returns {Promise<void>}
     */
    Islet.prototype.initialize = function () {
        var adapters = _.values(this.adapters);
        return Promise.all(adapters.map(function (adapter) {
            return adapter.initialize();
        }));
    };
    /**
     * @returns {Promise<void>}
     */
    Islet.prototype.start = function () {
        var adapters = _.values(this.adapters).filter(function (adapter) {
            return adapter instanceof ListenableAdapter;
        });
        // Initialize all of the adapters to register resource into routing table.
        adapters.forEach(function (adapter) {
            adapter.postInitialize();
        });
        return Promise.all(adapters.map(function (adapter) {
            return adapter.listen();
        }));
    };
    return Islet;
})();
module.exports = Islet;

//# sourceMappingURL=data:application/json;base64,