/// <reference path="../typings/tsd.d.ts" />
var _ = require('lodash');
var Promise = require('bluebird');
var ListenableAdapter = require('./adapters/listenable-adapter');
/**
 * Create a new Islet.
 * @abstract
 * @class
 */
var Islet = (function () {
    function Islet() {
        /** @type {Object.<string, IAbstractAdapter>} [adapters={}] */
        this.adapters = {};
    }
    /**
     * Register the islet which is the suite of micro-service
     * @param {Islet} islet
     * @static
     */
    Islet.registerIslet = function (islet) {
        if (Islet.islet)
            throw new Error('The islet already has been registered.');
        Islet.islet = islet;
    };
    Islet.getIslet = function () {
        return Islet.islet;
    };
    /**
     * Instantiate and run a microservice.
     * @param {Microservice} Class
     * @static
     */
    Islet.run = function (Class) {
        if (this.islet)
            return;
        // Load config.yaml
        //var options = yaml.safeLoad(fs.readFileSync(__dirname + '/config.yaml', 'utf8'));
        // Create such a micro-service instance.
        var islet = new Class();
        this.registerIslet(islet);
        islet.main({});
        return islet.initialize().then(function () {
            return islet.start();
        });
    };
    /**
     * Register the adapter.
     * @param {string} name
     * @param {IAbstractAdapter} adapter
     */
    Islet.prototype.registerAdapter = function (name, adapter) {
        if (this.adapters[name])
            throw new Error('duplicated adapter');
        this.adapters[name] = adapter;
    };
    Islet.prototype.getAdaptee = function (name) {
        if (!this.adapters[name])
            throw new Error('Missing adapter');
        return this.adapters[name].adaptee;
    };
    /**
     * @abstract
     * @param {ServiceOptions} options
     */
    Islet.prototype.main = function (options) {
        throw new Error('Not implemented exception.');
    };
    /**
     * @returns {Promise<void>}
     */
    Islet.prototype.initialize = function () {
        var adapters = _.values(this.adapters);
        return Promise.all(adapters.map(function (adapter) {
            return adapter.initialize();
        }));
    };
    /**
     * @returns {Promise<void>}
     */
    Islet.prototype.start = function () {
        var adapters = _.values(this.adapters).filter(function (adapter) {
            return adapter instanceof ListenableAdapter;
        });
        // Initialize all of the adapters to register resource into routing table.
        adapters.forEach(function (adapter) {
            adapter.postInitialize();
        });
        return Promise.all(adapters.map(function (adapter) {
            return adapter.listen();
        }));
    };
    return Islet;
})();
module.exports = Islet;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzbGV0LnRzIl0sIm5hbWVzIjpbIklzbGV0IiwiSXNsZXQuY29uc3RydWN0b3IiLCJJc2xldC5yZWdpc3RlcklzbGV0IiwiSXNsZXQuZ2V0SXNsZXQiLCJJc2xldC5ydW4iLCJJc2xldC5yZWdpc3RlckFkYXB0ZXIiLCJJc2xldC5nZXRBZGFwdGVlIiwiSXNsZXQubWFpbiIsIklzbGV0LmluaXRpYWxpemUiLCJJc2xldC5zdGFydCJdLCJtYXBwaW5ncyI6IkFBQUEsQUFDQSw0Q0FENEM7QUFDNUMsSUFBTyxDQUFDLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFFN0IsSUFBTyxPQUFPLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFHckMsSUFBTyxpQkFBaUIsV0FBVywrQkFBK0IsQ0FBQyxDQUFDO0FBRXBFLEFBS0E7Ozs7R0FERztJQUNHLEtBQUs7SUFBWEEsU0FBTUEsS0FBS0E7UUE2Q1RDLDhEQUE4REE7UUFDdERBLGFBQVFBLEdBQTBDQSxFQUFFQSxDQUFDQTtJQXdEL0RBLENBQUNBO0lBbkdDRDs7OztPQUlHQTtJQUNZQSxtQkFBYUEsR0FBNUJBLFVBQTZCQSxLQUFZQTtRQUN2Q0UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFBQ0EsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0Esd0NBQXdDQSxDQUFDQSxDQUFDQTtRQUMzRUEsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBU2FGLGNBQVFBLEdBQXRCQTtRQUNFRyxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNyQkEsQ0FBQ0E7SUFFREg7Ozs7T0FJR0E7SUFDV0EsU0FBR0EsR0FBakJBLFVBQWtCQSxLQUFtQkE7UUFDbkNJLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQUNBLE1BQU1BLENBQUNBO1FBRXZCQSxBQUlBQSxtQkFKbUJBO1FBQ25CQSxtRkFBbUZBO1FBRW5GQSx3Q0FBd0NBO1lBQ3BDQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFMUJBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ2ZBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBO1lBQzdCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUN2QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFLREo7Ozs7T0FJR0E7SUFDSUEsK0JBQWVBLEdBQXRCQSxVQUF1QkEsSUFBWUEsRUFBRUEsT0FBeUJBO1FBQzVESyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUFDQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1FBQy9EQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFRTUwsMEJBQVVBLEdBQWpCQSxVQUFrQkEsSUFBWUE7UUFDNUJNLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQUNBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7UUFDN0RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBO0lBQ3JDQSxDQUFDQTtJQUVETjs7O09BR0dBO0lBQ0lBLG9CQUFJQSxHQUFYQSxVQUFZQSxPQUF1QkE7UUFDakNPLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsQ0FBQ0E7SUFDaERBLENBQUNBO0lBRURQOztPQUVHQTtJQUNJQSwwQkFBVUEsR0FBakJBO1FBQ0VRLElBQUlBLFFBQVFBLEdBQXVCQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMzREEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBTUEsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBQUEsT0FBT0E7WUFBTUEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7UUFBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDckZBLENBQUNBO0lBRURSOztPQUVHQTtJQUNJQSxxQkFBS0EsR0FBWkE7UUFDRVMsSUFBSUEsUUFBUUEsR0FBa0NBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLFVBQUFBLE9BQU9BO1lBQ2xGQSxNQUFNQSxDQUFDQSxPQUFPQSxZQUFZQSxpQkFBaUJBLENBQUNBO1FBQzlDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVIQSxBQUNBQSwwRUFEMEVBO1FBQzFFQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFBQSxPQUFPQTtZQUN0QkEsT0FBT0EsQ0FBQ0EsY0FBY0EsRUFBRUEsQ0FBQ0E7UUFDM0JBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQU1BLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLFVBQUFBLE9BQU9BO1lBQzFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUMxQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7SUFDTEEsQ0FBQ0E7SUFDSFQsWUFBQ0E7QUFBREEsQ0F0R0EsQUFzR0NBLElBQUE7QUFFRCxBQUFlLGlCQUFOLEtBQUssQ0FBQyIsImZpbGUiOiJpc2xldC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvd29raW0vUHJvamVjdHMvTkZTL3Job21idXMvbWV0YS9iZS9leHRlcm5hbHMvaXNsYW5kLyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IFNlcnZpY2VPcHRpb25zID0gcmVxdWlyZSgnLi9vcHRpb25zL3NlcnZpY2Utb3B0aW9ucycpO1xuaW1wb3J0IElBYnN0cmFjdEFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2ludGVyZmFjZXMvYWJzdHJhY3QtYWRhcHRlci1pbnRlcmZhY2UnKTtcbmltcG9ydCBMaXN0ZW5hYmxlQWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvbGlzdGVuYWJsZS1hZGFwdGVyJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IElzbGV0LlxuICogQGFic3RyYWN0XG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgSXNsZXQge1xuICBwcml2YXRlIHN0YXRpYyBpc2xldDogSXNsZXQ7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHRoZSBpc2xldCB3aGljaCBpcyB0aGUgc3VpdGUgb2YgbWljcm8tc2VydmljZVxuICAgKiBAcGFyYW0ge0lzbGV0fSBpc2xldFxuICAgKiBAc3RhdGljXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyByZWdpc3RlcklzbGV0KGlzbGV0OiBJc2xldCkge1xuICAgIGlmIChJc2xldC5pc2xldCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgaXNsZXQgYWxyZWFkeSBoYXMgYmVlbiByZWdpc3RlcmVkLicpO1xuICAgIElzbGV0LmlzbGV0ID0gaXNsZXQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgcmVnaXN0ZXJlZCBtaWNyby1zZXJ2aWNlLlxuICAgKiBAcmV0dXJucyB7TWljcm9zZXJ2aWNlfVxuICAgKiBAc3RhdGljXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldElzbGV0KCk6IElzbGV0O1xuICBwdWJsaWMgc3RhdGljIGdldElzbGV0PFQ+KCk6IFQ7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0SXNsZXQoKTogYW55IHtcbiAgICByZXR1cm4gSXNsZXQuaXNsZXQ7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFudGlhdGUgYW5kIHJ1biBhIG1pY3Jvc2VydmljZS5cbiAgICogQHBhcmFtIHtNaWNyb3NlcnZpY2V9IENsYXNzXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcnVuKENsYXNzOiB0eXBlb2YgSXNsZXQpIHtcbiAgICBpZiAodGhpcy5pc2xldCkgcmV0dXJuO1xuXG4gICAgLy8gTG9hZCBjb25maWcueWFtbFxuICAgIC8vdmFyIG9wdGlvbnMgPSB5YW1sLnNhZmVMb2FkKGZzLnJlYWRGaWxlU3luYyhfX2Rpcm5hbWUgKyAnL2NvbmZpZy55YW1sJywgJ3V0ZjgnKSk7XG5cbiAgICAvLyBDcmVhdGUgc3VjaCBhIG1pY3JvLXNlcnZpY2UgaW5zdGFuY2UuXG4gICAgdmFyIGlzbGV0ID0gbmV3IENsYXNzKCk7XG4gICAgdGhpcy5yZWdpc3RlcklzbGV0KGlzbGV0KTtcblxuICAgIGlzbGV0Lm1haW4oe30pO1xuICAgIHJldHVybiBpc2xldC5pbml0aWFsaXplKCkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gaXNsZXQuc3RhcnQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIElBYnN0cmFjdEFkYXB0ZXI+fSBbYWRhcHRlcnM9e31dICovXG4gIHByaXZhdGUgYWRhcHRlcnM6IHsgW25hbWU6IHN0cmluZ106IElBYnN0cmFjdEFkYXB0ZXI7IH0gPSB7fTtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgdGhlIGFkYXB0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7SUFic3RyYWN0QWRhcHRlcn0gYWRhcHRlclxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVyQWRhcHRlcihuYW1lOiBzdHJpbmcsIGFkYXB0ZXI6IElBYnN0cmFjdEFkYXB0ZXIpIHtcbiAgICBpZiAodGhpcy5hZGFwdGVyc1tuYW1lXSkgdGhyb3cgbmV3IEVycm9yKCdkdXBsaWNhdGVkIGFkYXB0ZXInKTtcbiAgICB0aGlzLmFkYXB0ZXJzW25hbWVdID0gYWRhcHRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcmV0dXJucyB7dHlwZW9mIEFkYXB0ZXJ9XG4gICAqL1xuICBwdWJsaWMgZ2V0QWRhcHRlZTxUPihuYW1lOiBzdHJpbmcpOiBUO1xuICBwdWJsaWMgZ2V0QWRhcHRlZShuYW1lOiBzdHJpbmcpOiBhbnk7XG4gIHB1YmxpYyBnZXRBZGFwdGVlKG5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCF0aGlzLmFkYXB0ZXJzW25hbWVdKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgYWRhcHRlcicpO1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXJzW25hbWVdLmFkYXB0ZWU7XG4gIH1cblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7U2VydmljZU9wdGlvbnN9IG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBtYWluKG9wdGlvbnM6IFNlcnZpY2VPcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgZXhjZXB0aW9uLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgcHVibGljIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIGFkYXB0ZXJzOiBJQWJzdHJhY3RBZGFwdGVyW10gPSBfLnZhbHVlcyh0aGlzLmFkYXB0ZXJzKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGw8YW55PihhZGFwdGVycy5tYXAoYWRhcHRlciA9PiB7IHJldHVybiBhZGFwdGVyLmluaXRpYWxpemUoKTsgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIHZhciBhZGFwdGVyczogTGlzdGVuYWJsZUFkYXB0ZXI8YW55LCBhbnk+W10gPSBfLnZhbHVlcyh0aGlzLmFkYXB0ZXJzKS5maWx0ZXIoYWRhcHRlciA9PiB7XG4gICAgICByZXR1cm4gYWRhcHRlciBpbnN0YW5jZW9mIExpc3RlbmFibGVBZGFwdGVyO1xuICAgIH0pO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBhbGwgb2YgdGhlIGFkYXB0ZXJzIHRvIHJlZ2lzdGVyIHJlc291cmNlIGludG8gcm91dGluZyB0YWJsZS5cbiAgICBhZGFwdGVycy5mb3JFYWNoKGFkYXB0ZXIgPT4ge1xuICAgICAgYWRhcHRlci5wb3N0SW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsPGFueT4oYWRhcHRlcnMubWFwKGFkYXB0ZXIgPT4ge1xuICAgICAgcmV0dXJuIGFkYXB0ZXIubGlzdGVuKCk7XG4gICAgfSkpXG4gIH1cbn1cblxuZXhwb3J0ID0gSXNsZXQ7Il19